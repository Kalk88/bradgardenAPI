FORMAT: 1A
HOST: http://TBD.something

# BrädgårdenAPI
BrädgårdenStats is the key to finding who the best bord game player in Brädgården really is.
The API contains members & games in Brädgården and stats from bord game sessions.


# Group Endpoints
### Get Endpoints [GET /api/endpoints]
Retrives a list of callable endpoints.

+ Response 200 (application/json)

    + Attributes  (object)
        - games: /api/games (string, required)
        - sessions: /api/sessions (string, required)
        - members: /api/members (string, required)


# Group Members
## Collection Members [/api/members]
A member is represented with their first and last name. Wins losses and more can be retrived from the members route.

### Add Member [POST]
This operation adds a member to the collection. It take the first and last name of the member as a JSON object.
+  Request (application/json)
    + Headers

                 Authorization: 1234Example

    + Attributes (BaseMember, required)

+ Response 201 (application/json)
    + Headers

                Location: /api/members/id

    + Attributes(Id)

+  Request (application/json)
    + Headers

                 Authorization: 1234Example

    + Attributes (BaseMember, required)
        - firstName: j
        - lastName: j

+ Response 400 (application/json)

    + Attributes
        - error_message: invalid JSON

### Get Members [GET /api/members{?pageSize,pageStart}]
This operation retrives an array of members.
+ Parameters
    + pageSize: 0 (number, optional)
    + pageStart: 0 (number, optional)
        + Default: 0
+  Request
    + Headers

                 Authorization: 1234Example

+ Response 200 (application/json)

    + Attributes (array[Member])



### Single Member [/api/members/{Id}]
+ Parameters
    + Id: 1

### Get a Member [GET]
This operation retrive a single member with more information than get members.
+  Request
    + Headers

                 Authorization: 1234Example

+ Response 200 (application/json)
    + Attributes (Member)


### Remove Member [DELETE]
This operation removes a member permanently from the collection. Use with caution as all stats will be lost.
+  Request
    + Headers

                 Authorization: 1234Example

+ Response 204

# Group Games
## Collection Games [/api/games]
A record of a games owned by Brädgården.
### Add Game [POST]
This operation adds a game to the collection.
+  Request (application/json)
    + Headers

                 Authorization: 1234Example

    + Attributes(BaseGame)

+ Response 201 (application/json)
    + Headers

                 Location: /api/members/id

    + Attributes(Id)

+ Response 400 (application/json)

    + Attributes
        - error_message: invalid JSON

### Get Games [GET /api/games{?pageSize,pageStart}]
This operation retrives a list of board games. may be filtered with query parameters.
+ Parameters
    + pageSize: 0 (number, optional)
    + pageStart: 0 (number, optional)
        + Default: 0
+  Request
    + Headers

                 Authorization: 1234Example

+ Response 200 (application/json)

    + Attributes(array[Game])

## Single Game [/api/games/{id}]
+ Parameters
    + id: 1 (number) - Id of game.

### Update Game [PUT]
This operation updates a game in the collection.
+  Request (application/json)
    + Headers

                 Authorization: 1234Example
    + Attributes (Game)

+ Response 204
    + Headers

                 Location: /api/members/id

### Remove Game [DELETE]
+  Request
    + Headers

                 Authorization: 1234Example

+ Response 204

# Group Sessions
## Collection Sessions [/api/sessions]
Sessions contains data about who won against who in what game at some point in time.
### Add Session [POST]
This operation adds a game session to the collection.
+  Request (application/json)
    + Headers

                 Authorization: 1234Example

   + Attributes(BaseSession)

+ Response 201 (application/json)
    + Headers

                 Location: /api/members/id

### Get Session [GET /api/sessions{?pageSize,pageStart}]
This operation returns a list of sessions from the collection.
May be filtered with query parameters.
+ Parameters
    + pageSize: 0 (number, optional)
    + pageStart: 0 (number, optional)

+  Request
    + Headers

                 Authorization: 1234Example

+ Response 200 (application/json)

    + Attributes(array[Session])


# Single Session [/api/sessions/{id}]
+ Parameters
    + id: 1 (number) - Id of session

### Remove Session [DELETE]
This operation removes a session from the collection.
+  Request
    + Headers

                Authorization: requestHeader

+ Response 204



# Group Access
Sign up for an API key to access the routes.

# Data Structures

## BaseMember (object)
- firstName: Jens (string, required) - First name of the member.
- lastName: Johnny (string, required) - Last name of the member.

## Sample
- firstName: Ola (string, required)
- lastName: Conny (string, required)

## Id
- id: 1 (string, required) - Identiier of the entity.

## Sample
- Id: 2 (string, required)

## MemberStats
- wins: 2 (number, required) - Number of wins member has.
- winRatio: 0.5 (number, required) - members current win ratio.
- losses: 2 (number, required) - Number of losses member has.
- timesTraitor: 0 (number, required) - Times member has been the traitor.
- gamesPlayed: 4 (number, required) Number of times member has played games.

# Member (object)
- id: 1 (number, required)
- include BaseMember
- include MemberStats

## BaseGame
- name: Ticket To Ride (required) - Name of the Game.
- maxNumOfPlayers: 6 (number, required) - The maximum number of players in the game.
- traitor: true (boolean, required) - True if game has traitor mechanic.
- coop: false (boolean, required) - True if game is co-op.

## Game (object)
- id: 1 (number, required)
- include BaseGame

## BaseSession
- gameID: 1 (number, required) - Id of played game.
- winners: 1 (array, required) - Id of winners.
- losers: 2 (array, required) -  Id of losers.
- traitors: 1 (array, optional) - Id of traitors if there where any.

## Session (object)
- id: 1 (number, required)
- include BaseSession
- date: 2018-04-27T20:06+02:00 (string, required) - Dates are generated when session is posted.