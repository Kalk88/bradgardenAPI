FORMAT: 1A
HOST: http://TBD.something

# BrädgårdenAPI
BrädgårdenStats is the key to finding who the best bord game player in Brädgården really is.
The API contains members & games in Brädgården and stats from bord game sessions.


# Group Endpoints
### Get Endpoints [GET /api/endpoints]
Retrives a list of callable endpoints.

+ Response 200 (application/json)

    + Attributes(array[Endpoint])

# Group Members
## Collection Members [/api/members]
A member is represented with their first and last name. Wins losses and more can be retrived from the members route.

### Add Member [POST]
This operation adds a member to the collection. It take the first and last name of the member as a JSON object.
+  Request (application/json)
    + Headers

                 Authorization: 1234Example
    + Attributes(Member1)

+ Response 201 (application/json)
    + Headers

                 Location: /api/members/id
    + Attributes
        + id: 1 (number) - Id of member.

### Get Members [GET /api/members{?pageSize,pageStart}]
This operation retrives an array of members.
+ Parameters
    + pageSize: 10 (number, optional)
    + pageStart: 5 (number, optional)
        + Default: 0
+  Request
    + Headers

                 Authorization: 1234Example

+ Response 200 (application/json)
    + Attributes (array[MemberWithStats1, MemberWithStats2, MemberWithStats3 ])

### Single Member [/api/members/{id}]
+ Parameters
    + id: 1 (number) - Id of member.

### Get a Member [GET]
This operation retrive a single member with more information than get members.
+  Request
    + Headers

                 Authorization: 1234Example

+ Response 200 (application/json)
    + Attributes (array[MemberWithStats1])

### Update Member [PUT]
This operation updates a member in the collection.
+  Request (application/json)
    + Headers

                 Authorization: 1234Example
    + Attributes(MemberWithId1)

+ Response 204
    + Headers

                 Location: /api/members/id

### Remove Member [DELETE]
This operation removes a member permanently from the collection. Use with caution as all stats will be lost.
+  Request
    + Headers

                 Authorization: 1234Example

+ Response 204 (application/json)

# Group Games
## Collection Games [/api/games]
A record of a games owned by Brädgården.
### Add Game [POST]
This operation adds a game to the collection.
+  Request (application/json)
    + Headers

                 Authorization: 1234Example
    + Attributes(Game1)

+ Response 201 (application/json)
    + Headers

                 Location: /api/members/id
    + Attributes
        + id: 1 (number) - Id of game.

### Get Games [GET /api/games{?pageSize,pageStart}]
This operation retrives a list of board games. may be filtered with query parameters.
+ Parameters
    + pageSize: 10 (number, optional)
    + pageStart: 5 (number, optional)
        + Default: 0
+  Request
    + Headers

                 Authorization: 1234Example

+ Response 200 (application/json)
    + Attributes(array[GameWithId1,GameWithId1])

## Single Game [/api/games/{id}]
+ Parameters
    + id: 1 (number) - Id of game.

### Update Game [PUT]
This operation updates a game in the collection.
+  Request (application/json)
    + Headers

                 Authorization: 1234Example
    + Attributes (Game1)

+ Response 204
    + Headers

                 Location: /api/members/id
### Remove Game [DELETE]
+  Request
    + Headers

                 Authorization: 1234Example

+ Response 204

# Group Sessions
## Collection Sessions [/api/sessions]
Sessions contains data about who won against who in what game at some point in time.
****UNDER CONSTRUCTION****
### Add Session [POST]
This operation adds a game session to the collection.
+  Request (application/json)
    + Headers

                 Authorization: 1234Example
    + Attributes(array[Session])

+ Response 201 (application/json)
    + Headers

                 Location: /api/members/id
    + Attributes
        + id: 1 (number) - Id of session.

### Get Session [GET /api/sessions{?pageSize,pageStart}]
This operation returns a list of sessions from the collection.
May be filtered with query parameters.
+ Parameters
    + pageSize: 10 (number, optional)
    + pageStart: 5 (number, optional)
        + Default: 0
+  Request
    + Headers

                 Authorization: 1234Example

+ Response 200 (application/json)
    + Attributes(array[SessionWithId])


# Single Session [/api/sessions/{id}]
+ Parameters
    + id: 1 (number) - Id of session

### Remove Session [DELETE]
This operation removes a session from the collection.
+  Request
    + Headers

                Authorization: requestHeader

+ Response 204 (application/json)



# Group Access
Sign up for an API key to access the routes.

# Data Structures

## Endpoint
- games: /api/games (string, required)
- sessions: /api/sessions (string, required)
- members: /api/members (string, required)

## MemberWithStats1
- include MemberWithId1
- wins: 10 (number, required)
- winRatio: 0.90 (number, required)
- losses: 100 (number, required)
- timesTraitor: 9000 (number, required)
- gamesPlayed: 9010 (number, required)

## MemberWithStats2
- include MemberWithId2
- wins: 10 (number, required)
- winRatio: 0.90 (number, required)
- losses: 100 (number, required)
- timesTraitor: 9000 (number, required)
- gamesPlayed: 9010 (number, required)

## MemberWithStats3
- include MemberWithId3
- wins: 10 (number, required)
- winRatio: 0.90 (number, required)
- losses: 100 (number, required)
- timesTraitor: 9000 (number, required)
- gamesPlayed: 9010 (number, required)

## MemberWithId1 (object)
- id: 1 (number, required)
- include Member1

## MemberWithId2 (object)
- id: 2 (number, required)
- include Member2

## MemberWithId3 (object)
- id: 3 (number, required)
- include Member3

## Member1 (object)
- firstName: Jens (required)
- lastName: Johnny (required)

## Member2 (object)
- firstName: Carl (required)
- lastName:  Conny (required)

## Member3 (object)
- firstName: Lars (required)
- lastName: Lök (required)

## GameWithId1 (object)
- id: 1 (number, required)
- include Game1

## GameWithId2 (object)
- id: 2 (number, required)
- include Game2

## GameWithId3 (object)
- id: 3 (number, required)
- include Game3

## Game1 (object)
- name: Ticket To Ride (required)
- maxNumOfPlayers: 5 (number, required)
- traitor: false (boolean, required)
- coop: false (boolean, required)

## Game2 (object)
- name: Shadows over Camelot (required)
- maxNumOfPlayers: 8 (number, required)
- traitor: true (boolean, required)
- coop: true (boolean, required)


## Game3 (object)
- name: Twilight Imperium 4 (required)
- maxNumOfPlayers: 6 (number, required)
- traitor: false (boolean, required)
- coop: false (boolean, required)


## SessionWithId (object)
- id: 1 (number, required)
- gamePlayed: 1 (number, required)
- date: 20/5/2017 (string, required)
- winners (array[number], required)
- losers (array[number], required)
- traitors (array[number], required)

## Session (object)
- gameID: 5 (number, required)
- winners: 1 (array, required)
- losers: 2, 3 (array, required)
- traitors: 1 (array, optional)